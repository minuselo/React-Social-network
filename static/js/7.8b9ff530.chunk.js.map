{"version":3,"sources":["components/common/validation/validation.js","components/login/Login.jsx","components/login/login.module.css"],"names":["symblosCount","required","value","undefined","maxLenght20","length","composeValidators","validators","reduce","error","validator","LoginForm","props","onSubmit","e","login","pass","rememberMe","isErrored","FORM_ERROR","render","handleSubmit","submitError","name","validate","input","meta","type","placeholder","touched","className","s","errored","remember","component","connect","state","isAuth","auth","to","form","module","exports"],"mappings":"mHAKgCA,E,8BALnBC,EAAW,SAACC,GACzB,OAAOA,OAAMC,EAAU,+F,uDCSjBC,GDL0BJ,ECKM,GDJlC,SAACE,GACG,OAAOA,GAAOA,EAAMG,OAAOL,EAApB,wOAA8EA,QAAeG,ICItGG,EAAoB,sCAAIC,EAAJ,yBAAIA,EAAJ,uBAAmB,SAACL,GAAD,OACzCK,EAAWC,QAAO,SAACC,EAAOC,GAAR,OAAsBD,GAASC,EAAUR,UAAQC,KAGjEQ,EAAY,SAACC,GAUf,OAAO,cAAC,IAAD,CACHC,SATW,SAACC,GAEZ,GADAF,EAAMG,MAAMD,EAAEC,MAAOD,EAAEE,KAAMF,EAAEG,YAC3BL,EAAMM,UACN,OAAO,eAAEC,IAAa,iBAO1BC,OAAQ,gBAAEC,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,YAAhB,OACJ,uBAAMT,SAAUQ,EAAhB,UACI,gEACA,cAAC,IAAD,CAAOE,KAAK,QAAQC,SAAUlB,EAAkBL,EAAUG,GAA1D,SAEQ,gBAAEqB,EAAF,EAAEA,MAAOC,EAAT,EAASA,KAAT,OACI,gCACI,mCAAOC,KAAK,OAAOC,YAAY,6EAAoBH,IAClDC,EAAKjB,OAASiB,EAAKG,SAAW,sBAAMC,UAAWC,IAAEC,QAAnB,SAA6BN,EAAKjB,cAKjF,cAAC,IAAD,CAAOc,KAAK,OAAOC,SAAUlB,EAAkBL,EAAUG,GAAzD,SAEQ,gBAAEqB,EAAF,EAAEA,MAAOC,EAAT,EAASA,KAAT,OACI,gCACI,mCAAOC,KAAK,WAAWC,YAAY,mFAAqBH,IACvDC,EAAKjB,OAASiB,EAAKG,SAAW,sBAAMC,UAAWC,IAAEC,QAAnB,SAA6BN,EAAKjB,cAKjF,sBAAKqB,UAAWC,IAAEE,SAAlB,UACI,cAAC,IAAD,CAAOV,KAAK,aAAaW,UAAU,QAAQP,KAAK,aAChD,sHAEHL,GAAe,8BAAMA,IACtB,8BACI,wBAAQK,KAAK,SAAb,qDAqBLQ,uBALO,SAACC,GAAD,MAAY,CAC9BC,OAAQD,EAAME,KAAKD,OACnBnB,UAAWkB,EAAME,KAAKpB,aAGc,CAACH,WAA1BoB,EAbD,SAACvB,GAEX,OAAIA,EAAMyB,OACC,cAAC,IAAD,CAAUE,GAAG,aAEjB,qBAAKT,UAAWC,IAAES,KAAlB,SAAwB,cAAC,EAAD,CAAWtB,UAAWN,EAAMM,UAAWH,MAAOH,EAAMG,c,mBCpEvF0B,EAAOC,QAAU,CAAC,KAAO,oBAAoB,QAAU,uBAAuB,SAAW","file":"static/js/7.8b9ff530.chunk.js","sourcesContent":["export const required = (value)=>{\r\nreturn value?undefined:\"Введите значение\"\r\n}\r\n\r\n\r\nexport const maxSymbolsCreator=(symblosCount)=>\r\n    (value)=>{\r\n        return value&&value.length>symblosCount?`Количество символов не должно быть больше ${symblosCount}`:undefined\r\n}","import React from 'react';\r\nimport {Form, Field} from 'react-final-form';\r\nimport {maxSymbolsCreator, required} from \"../common/validation/validation\";\r\nimport {login} from \"../../redux/authReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {FORM_ERROR} from \"final-form\";\r\nimport s from './login.module.css';\r\n\r\n\r\nconst maxLenght20 = maxSymbolsCreator(20);\r\nconst composeValidators = (...validators) => (value) =>\r\n    validators.reduce((error, validator) => error || validator(value), undefined);\r\n\r\n\r\nconst LoginForm = (props) => {\r\n\r\n    let onSubmit = (e) => {\r\n        props.login(e.login, e.pass, e.rememberMe);\r\n        if (props.isErrored) {\r\n            return {[FORM_ERROR]: \"Login Failed\"};\r\n        }\r\n\r\n    }\r\n\r\n    return <Form\r\n        onSubmit={onSubmit}\r\n        render={({handleSubmit, submitError}) => (\r\n            <form onSubmit={handleSubmit}>\r\n                <h3>Войти</h3>\r\n                <Field name=\"login\" validate={composeValidators(required, maxLenght20)}>\r\n                    {\r\n                        ({input, meta}) => (\r\n                            <div>\r\n                                <input type=\"text\" placeholder=\"Введите логин\" {...input}/>\r\n                                {meta.error && meta.touched && <span className={s.errored}>{meta.error}</span>}\r\n                            </div>\r\n                        )\r\n                    }\r\n                </Field>\r\n                <Field name=\"pass\" validate={composeValidators(required, maxLenght20)}>\r\n                    {\r\n                        ({input, meta}) => (\r\n                            <div>\r\n                                <input type=\"password\" placeholder=\"Введите пароль\" {...input}/>\r\n                                {meta.error && meta.touched && <span className={s.errored}>{meta.error}</span>}\r\n                            </div>\r\n                        )\r\n                    }\r\n                </Field>\r\n                <div className={s.remember}>\r\n                    <Field name=\"rememberMe\" component=\"input\" type=\"checkbox\"/>\r\n                    <span>запомнить меня</span>\r\n                </div>\r\n                {submitError && <div>{submitError}</div>}\r\n                <div>\r\n                    <button type=\"submit\">Войти</button>\r\n                </div>\r\n            </form>\r\n        )}\r\n    />\r\n}\r\n\r\n\r\nconst Login = (props) => {\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to=\"/profile\"/>\r\n    }\r\n    return <div className={s.form}><LoginForm isErrored={props.isErrored} login={props.login}/></div>\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    isErrored: state.auth.isErrored\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"login_form__1rL5o\",\"errored\":\"login_errored__3yGmQ\",\"remember\":\"login_remember__2PpMs\"};"],"sourceRoot":""}